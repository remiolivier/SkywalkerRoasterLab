name: _PIO Build (reusable)

on:
  workflow_call:
    inputs:
      working_dir:
        required: true
        type: string
      envs:               # JSON array: ["s3","s3-mini"]
        required: true
        type: string
      cache_key_path:     # path to platformio.ini for cache key
        required: true
        type: string
      artifact_prefix:    # e.g., "cubean"
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}

    strategy:
      fail-fast: false
      matrix:
        env: ${{ fromJson(inputs.envs) }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache PlatformIO
        uses: actions/cache@v4
        with:
          path: |
            ~/.platformio
            ~/.cache/pip
          key: pio-${{ runner.os }}-${{ hashFiles(inputs.cache_key_path) }}
          restore-keys: pio-${{ runner.os }}-

      - name: Install PlatformIO
        run: pip install -U platformio

      - name: Build (${{ matrix.env }})
        run: pio run -e ${{ matrix.env }}

      - name: Collect firmware (${{ matrix.env }})
        run: |
          mkdir -p dist
          for f in ".pio/build/${{ matrix.env }}/firmware.bin" \
                   ".pio/build/${{ matrix.env }}"/*.uf2 \
                   ".pio/build/${{ matrix.env }}"/*.hex; do
            [ -f "$f" ] && cp -v "$f" "dist/${{ inputs.artifact_prefix }}-${{ matrix.env }}-$(basename "$f")"
          done
          ls -l dist || true

      - name: Upload artifact (${{ matrix.env }})
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_prefix }}-${{ matrix.env }}
          path: ${{ inputs.working_dir }}/dist/*
          if-no-files-found: error
